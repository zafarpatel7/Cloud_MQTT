

/******************************************************************************
 * LOCAL INCLUDE FILES
 *****************************************************************************/
#include "Time.h"
#include "Clock.h"
#ifdef _ERROR_HANDLER_
#include "Error.h"
#endif

/******************************************************************************
 * LOCAL CONSTANT DEFINITIONS
 *****************************************************************************/
/** *\brief  Max count value */
#define TICKS_MAX_LIMIT		0xffffff00
/**  \brief Timers range is  TICKS_MAX_LIMIT - TICKS_DEEP */
#define TICKS_DEEP			(TICKS_MAX_LIMIT/4)
/** \brief 1ms loop */
#define NUM_LOOPS_ONE_MS_AT_ONE_MHZ		90		//  estava a 83 	?

#if (MAX_TIMERS >= 255 )
#error "timer"
#endif


#ifdef _USES_RTF_
 #undef _USES_RTF_
#endif

#include "Systick.h"

/******************************************************************************
 * LOCAL TYPE DEFINITIONS
 *****************************************************************************/
 
/** Timer struct */
typedef struct
{
	CUInt32 u32Ticks;	/**< Internal counter */
	CUInt8 	bOwn;		/**< Free flag */
}STick;

/******************************************************************************
 * LOCAL VARIABLES
 *****************************************************************************/
static STick  xTicks[MAX_TIMERS];		/**< Timers array */
static CUInt32		u32RefTick;			/**< Reference timer */
static CUInt32 	u32SYSCLK;			/**< System clock */


/*****************************************************************************
 * FUNCTION NAME:	TIM_DelayMS( CUInt32 u32milis )
 *****************************************************************************/
/**
* \brief    Delay
* \param 	u32milis 	[in]	milliseconds of delay
* \post	TIM Init has been called 
 *****************************************************************************/
void TIM_DelayMS( CUInt32 u32milis )
{

	unsigned int u32I, u32J;
    
	for(u32J=0; u32J<u32milis;u32J++)
	{
		for(u32I = 0; u32I < u32SYSCLK; u32I++);
	}
}



/*****************************************************************************
 * FUNCTION NAME:	void TIM_Init( void )
 *****************************************************************************/
/**
* \brief    	Initializes the tics  counter 
* \note	Call this function prior to any other of the module
 *****************************************************************************/
void TIM_Init( void )
{

    CUInt8 u8X;	
	
	/* Take the clock frequency */	
	u32SYSCLK = HAL_ClockGetClockVal( HCLK_CLK );

	u32SYSCLK /= ONE_MILLION;
	u32SYSCLK  *= NUM_LOOPS_ONE_MS_AT_ONE_MHZ;
	
  
	for( u8X=0; u8X<MAX_TIMERS; u8X++)
	{
	   xTicks[u8X].bOwn = 0;
	   xTicks[u8X].u32Ticks = 0;	   
    }

	u32RefTick = 0;
	
	#ifndef _USES_RTF_
	HAL_SysTickSetHandler( TIM_TimedTask );	// JPN R4   RTF_APP must be defined int he main.c folder or it causes confusion	
	#endif
}



/*****************************************************************************
 * FUNCTION NAME:	void TIM_Init( void )
 *****************************************************************************/
/**
* \brief    	Request for a timer
* \return	Timer identifier or TIM_ERROR if there are no free timers
 *****************************************************************************/
CUInt8 TIM_GetTimer( void )
{
    CUInt8 u8X;
  
	for( u8X=0; u8X<MAX_TIMERS; u8X++)
	{
		if( xTicks[u8X].bOwn == 0 )
		{
			xTicks[u8X].bOwn = TRUE;
			return u8X;
		}
	}
	
	return TIM_ERROR;
	
}


/*****************************************************************************
 * FUNCTION NAME:	CUInt8 TIM_FreeTimer( u8 u8TimId )
 *****************************************************************************/
/**
* \brief    	Request for a timer
* \param 	u8TimId  [in] Timer identificator
* \return	OK or SYST_ERROR if the Id isn't valid
 *****************************************************************************/
CUInt8 TIM_FreeTimer( CUInt8 u8TimId )
{
	/* Validate index */
	if( (u8TimId >= MAX_TIMERS ) || (xTicks[u8TimId].bOwn==0))
		return SYST_ERROR;
	
	xTicks[u8TimId].bOwn = 0;
	
	return SYST_OK;

}


/*****************************************************************************
 * FUNCTION NAME:	CUInt8 TIM_FreeTimer( u8 u8TimId )
 *****************************************************************************/
/**
* \brief    	Return the counter instant value
* \param 	u8TimerId  [in] Timer identificator
* \return	OK or SYST_ERROR if the Id isn't valid
 *****************************************************************************/
CUInt8 TIM_ResetTicks( CUInt8 u8TimerId )
{
	/* Validate index */
	if( (u8TimerId >= MAX_TIMERS ) || (xTicks[u8TimerId].bOwn==0))
		return SYST_ERROR;
		
	xTicks[u8TimerId].u32Ticks = u32RefTick;
	
	return SYST_OK;
	
}


/*****************************************************************************
 * FUNCTION NAME:	void TIM_TimedTask( void )
 *****************************************************************************/
/**
* \brief   Return the counter instant value
* \param u8TimerId  [in]Timer identificator
* \return  Ticks counted since las reset
* \note  The function doesn't validate the timer Id.
 *****************************************************************************/
CUInt32 TIM_GetTicks( u8 u8TimerId )
{
	return ( u32RefTick - xTicks[u8TimerId].u32Ticks );
}

/*****************************************************************************
 * FUNCTION NAME:	void TIM_TimedTask( void )
 *****************************************************************************/
/**
* \brief   Timed task of time module.  Updates the timer values
* 
 *****************************************************************************/
void TIM_TimedTask( void )
{

	/* 	
	RANGE = 0 ~0xffffffff
	DEEP :  rest	
	Max range garanteed =  RANGE - DEEP
	Max DEEP -->			
	Smaller deep values  increases  ticks valid margin
	Smaller deep values increases  processor work	
	*/
	
	CUInt8 u8X;
	
	u32RefTick++;
	
	if(  u32RefTick >= TICKS_MAX_LIMIT  )
	{
		for( u8X=0; u8X<MAX_TIMERS; u8X++)
		{
			if( xTicks[u8X].bOwn)
			{
				xTicks[u8X].u32Ticks -= TICKS_DEEP;
			}			
		}

		u32RefTick -= TICKS_DEEP;
	}
	
	#ifdef _USES_RTF_
	RTF_SetTimeOut( TIM_TASK_PERIOD,  RTF_TIM_TASK_ID );
	#endif
	
}



/*****************************************************************************
 * FUNCTION NAME:	void TIM_Task( TMessageID u8Message )
 *****************************************************************************/
/**
* \brief   Handles the TIME  module input messages from RTF 
* \param u8Message 	[in] Message to process	
 *****************************************************************************/
#ifdef _USES_RTF_ 
void TIM_Task( TMessageID u8Message )
{
	
	switch( u8Message )
	{
		case RTF_TASK_INIT_MESSAGE:
			TIM_Init();
		break;
		
		case RTF_TASK_RUN_MESSAGE:
			RTF_SetTimeOut( TIM_TASK_PERIOD,  RTF_TIM_TASK_ID );
		break;
		
		default:
			#ifdef _ERROR_HANDLER_
			ERR_SetError( E_ERR_SW_ERROR, __FILE__, __LINE__); 
			#endif
	}

}
#endif




/* Define to prevent recursive inclusion -------------------------------*/
#ifndef __TIME_H
#define __TIME_H


/* Includes --------------------------------------------------------------------*/
//#include "GETypes.h"
#include "ProgramConfig.h"
#ifdef _USES_RTF_
 #include "RTF.h"
#endif



/* Exported constants -------------------------------------------------------*/

#define TIM_TASK_PERIOD		1		/**<   Time period in milis   */
#define MAX_TIMERS			40		/** Max timers available,  must be under 255 ( TIM_ERROR value) */
#define TIM_ERROR 	 		0xFF	/** Generic error response */


/** Fucntion return codes */
typedef enum{
	SYST_OK =0,
	SYST_ERROR = TIM_ERROR
} E_TicksReturnCode;




/* Exported functions -------------------------------------------------------*/


CUInt32 TIM_GetTicks( CUInt8 u8TimerId );
CUInt8 	TIM_ResetTicks( CUInt8 u8TimerId );
CUInt8 	TIM_FreeTimer( CUInt8 u8TimId );
CUInt8 	TIM_GetTimer( void );
void TIM_DelayMS( CUInt32 u32milis );

#ifdef _USES_RTF_
void TIM_Task( TMessageID u8Message );
#endif

void TIM_TimedTask( void );
void TIM_Init( void );

#endif // __TIMERS_H
